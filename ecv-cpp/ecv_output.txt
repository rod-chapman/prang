--------------------Configuration: Default configuration--------------------
Verification Studio: Running C:\Escher\PDTool\CplusPlus\UsualChecks\Output\Distribution64-2010\EscherToolC.exe -ll=C++11 -ld=0 -lcs -lws -ls(c=8,w=16,s=16,i=16,l=32,g=32,f=32,d=64,x=64,p=16) -sc="C:\Escher\ecv;C:\Escher\ecv\standard" -z1 -el=3 -em=100 -st=4 -sb=C:\Escher\PDTool\ecv.pd -sr=C:\Escher\PDTool\rubric.pd -vt=200 -vb=15 -vw=0 -vm=1000 -vps=tex -q=0 -vus=html -vpl=0 -vul=0 -vrs=html -vrl=0 -eM=2 "C:\Escher\Customers\prang-cpp\prang.cpp"
Escher Tool Critical Systems Edition version 7.00.
Copyright (C) 2017 Escher Technologies Ltd. All rights reserved.
Reading pre-parsed file C:\Escher\PDTool\ecv.pdc ... 0 seconds
Binding builtin file ... 0 seconds
Reading pre-parsed file C:\Escher\PDTool\rubric.pdc ... 0 seconds
Binding rubric file ... 0 seconds
Parsing file C:\Escher\Customers\prang-cpp\prang.cpp ... 0 seconds
C:\Escher\Customers\prang-cpp\prang.cpp (6,8): Warning! '#undef' used (MISRA-C 2012 rule 20.5).
919 lines processed in parsed files.
Building program dictionary ... 0 seconds
Binding type names ... 0 seconds
Building member dictionaries ... 0 seconds
Binding other names ... 0 seconds
C:\Escher\Customers\prang-cpp\prang.cpp (118,5): Warning! Unable to verify call to function 'printf' because it has a variable argument list (MISRA-C 2012 rule 17.1).
C:\Escher\Customers\prang-cpp\prang.cpp (125,9): Warning! Unable to verify call to function 'printf' because it has a variable argument list (MISRA-C 2012 rule 17.1).
Linking ... 0 seconds
Standardising ... 0 seconds
Analysing ... 0 seconds
Compacting memory ... 0 seconds

Verifying file 'C:\Escher\Customers\prang-cpp\prang.cpp' ...
Generating verification conditions ... 174 verification conditions generated
Proving verification conditions ... confirmed 167, unprovable 3, too hard 4 (95.9% confirmed, longest 11.7 seconds)
341 seconds
C:\Escher\Customers\prang-cpp\prang.cpp (32,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)30269.
C:\Escher\Customers\prang-cpp\prang.cpp (32,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)30269 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (33,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)171.
C:\Escher\Customers\prang-cpp\prang.cpp (33,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)171 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (34,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)177.
C:\Escher\Customers\prang-cpp\prang.cpp (34,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)177 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (35,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)2.
C:\Escher\Customers\prang-cpp\prang.cpp (35,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)2 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (37,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)30307.
C:\Escher\Customers\prang-cpp\prang.cpp (37,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)30307 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (38,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)172.
C:\Escher\Customers\prang-cpp\prang.cpp (38,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)172 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (39,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)176.
C:\Escher\Customers\prang-cpp\prang.cpp (39,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)176 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (40,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)35.
C:\Escher\Customers\prang-cpp\prang.cpp (40,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)35 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (42,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)30323.
C:\Escher\Customers\prang-cpp\prang.cpp (42,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)30323 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (43,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)170.
C:\Escher\Customers\prang-cpp\prang.cpp (43,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)170 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (44,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)178.
C:\Escher\Customers\prang-cpp\prang.cpp (44,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)178 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (45,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)63.
C:\Escher\Customers\prang-cpp\prang.cpp (45,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)63 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (50,25): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)1 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (50,25): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)1.
C:\Escher\Customers\prang-cpp\prang.cpp (50,32): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)2 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (50,32): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)2.
C:\Escher\Customers\prang-cpp\prang.cpp (50,39): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: (int)3 <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (50,39): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int', proved: minof(short int) <= (int)3.
C:\Escher\Customers\prang-cpp\prang.cpp (52,1): Information! Confirmed: Postcondition satisfied when constructor returns (defined at C:\Escher\Customers\prang-cpp\prang.cpp (20,20)), proved: operator*(heapIs $heap$funcend_786,1$, this).invariant1(heapIs $heap$funcend_786,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (58,18): Information! Confirmed: Precondition of 'div' satisfied (defined at C:\Escher\ecv\standard\stdlib.h (94,10)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: 0 < static_cast<int>(a1$funcstart_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (58,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$funcstart_790,1$, this).p1 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (58,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$funcstart_790,1$, this).p1.
C:\Escher\Customers\prang-cpp\prang.cpp (58,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= a1$funcstart_790,1$.
C:\Escher\Customers\prang-cpp\prang.cpp (58,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: a1$funcstart_790,1$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (59,20): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (operator*(heapIs $heap$funcstart_790,1$, this).p1 < a1$funcstart_790,1$) => (div1.rem == operator*(heapIs $heap$funcstart_790,1$, this).p1).
C:\Escher\Customers\prang-cpp\prang.cpp (59,48): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (a1$funcstart_790,1$ <= operator*(heapIs $heap$funcstart_790,1$, this).p1) => !(0 == div1.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (60,26): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0 == div1.rem) || !(0 == div1.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (62,18): Information! Confirmed: Precondition of 'div' satisfied (defined at C:\Escher\ecv\standard\stdlib.h (94,10)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: 0 < static_cast<int>(a2$funcstart_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (62,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$funcstart_790,1$, this).p2 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (62,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$funcstart_790,1$, this).p2.
C:\Escher\Customers\prang-cpp\prang.cpp (62,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= a2$funcstart_790,1$.
C:\Escher\Customers\prang-cpp\prang.cpp (62,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: a2$funcstart_790,1$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (63,20): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (operator*(heapIs $heap$funcstart_790,1$, this).p2 < a2$funcstart_790,1$) => (div2.rem == operator*(heapIs $heap$funcstart_790,1$, this).p2).
C:\Escher\Customers\prang-cpp\prang.cpp (63,48): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (a2$funcstart_790,1$ <= operator*(heapIs $heap$funcstart_790,1$, this).p2) => !(0 == div2.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (64,26): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0 == div2.rem) || !(0 == div2.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (66,18): Information! Confirmed: Precondition of 'div' satisfied (defined at C:\Escher\ecv\standard\stdlib.h (94,10)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: 0 < static_cast<int>(a3$funcstart_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (66,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$funcstart_790,1$, this).p3 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (66,22): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$funcstart_790,1$, this).p3.
C:\Escher\Customers\prang-cpp\prang.cpp (66,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= a3$funcstart_790,1$.
C:\Escher\Customers\prang-cpp\prang.cpp (66,31): Information! Confirmed: Type constraint satisfied in explicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: a3$funcstart_790,1$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (67,20): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (operator*(heapIs $heap$funcstart_790,1$, this).p3 < a3$funcstart_790,1$) => (div3.rem == operator*(heapIs $heap$funcstart_790,1$, this).p3).
C:\Escher\Customers\prang-cpp\prang.cpp (67,48): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (a3$funcstart_790,1$ <= operator*(heapIs $heap$funcstart_790,1$, this).p3) => !(0 == div3.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (68,26): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0 == div3.rem) || !(0 == div3.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (72,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= r1$funcstart_790,1$.
C:\Escher\Customers\prang-cpp\prang.cpp (72,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: r1$funcstart_790,1$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div1.rem) * r1$funcstart_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (72,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div1.rem) * r1$funcstart_790,1$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div1.rem <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div1.rem.
C:\Escher\Customers\prang-cpp\prang.cpp (72,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div1.rem).
C:\Escher\Customers\prang-cpp\prang.cpp (72,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div1.rem) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<short int>(div1.rem) * r1$funcstart_790,1$) - (static_cast<short int>(div1.quot) * b1$funcstart_790,1$)).
C:\Escher\Customers\prang-cpp\prang.cpp (72,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<short int>(div1.rem) * r1$funcstart_790,1$) - (static_cast<short int>(div1.quot) * b1$funcstart_790,1$)) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= b1$funcstart_790,1$.
C:\Escher\Customers\prang-cpp\prang.cpp (72,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: b1$funcstart_790,1$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div1.quot) * b1$funcstart_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (72,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div1.quot) * b1$funcstart_790,1$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div1.quot.
C:\Escher\Customers\prang-cpp\prang.cpp (72,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div1.quot <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (72,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div1.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (72,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div1.quot) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (73,12): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: -M1$790,1;808,8$ < operator*(heapIs $heap$790,1;808,8$, this).p1.
C:\Escher\Customers\prang-cpp\prang.cpp (73,25): Warning! Unable to prove: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#44), did not prove: !(0 == operator*(heapIs $heap$790,1;808,8$, this).p1).
	Suggestion: Add extra precondition or class invariant: !(0 == ((-2 * div((*this).p1, 177).quot) + (171 * div((*this).p1, 177).rem)))
C:\Escher\Customers\prang-cpp\prang.cpp (73,31): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;808,8$, this).p1 < M1$790,1;808,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (74,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= r2$790,1;808,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (74,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: r2$790,1;808,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div2.rem) * r2$790,1;808,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (74,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div2.rem) * r2$790,1;808,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div2.rem <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div2.rem.
C:\Escher\Customers\prang-cpp\prang.cpp (74,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div2.rem).
C:\Escher\Customers\prang-cpp\prang.cpp (74,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div2.rem) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<short int>(div2.rem) * r2$790,1;808,8$) - (static_cast<short int>(div2.quot) * b2$790,1;808,8$)).
C:\Escher\Customers\prang-cpp\prang.cpp (74,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<short int>(div2.rem) * r2$790,1;808,8$) - (static_cast<short int>(div2.quot) * b2$790,1;808,8$)) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= b2$790,1;808,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (74,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: b2$790,1;808,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div2.quot) * b2$790,1;808,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (74,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div2.quot) * b2$790,1;808,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div2.quot.
C:\Escher\Customers\prang-cpp\prang.cpp (74,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div2.quot <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (74,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div2.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (74,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div2.quot) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (75,12): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: -M2$790,1;810,8$ < operator*(heapIs $heap$790,1;810,8$, this).p2.
C:\Escher\Customers\prang-cpp\prang.cpp (75,25): Warning! Unable to prove: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#65), did not prove: !(0 == operator*(heapIs $heap$790,1;810,8$, this).p2).
	Suggestion: Add extra precondition or class invariant: !(0 == ((-35 * div((*this).p2, 176).quot) + (172 * div((*this).p2, 176).rem)))
C:\Escher\Customers\prang-cpp\prang.cpp (75,31): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;810,8$, this).p2 < M2$790,1;810,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (76,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= r3$790,1;810,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (76,10): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: r3$790,1;810,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div3.rem) * r3$790,1;810,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (76,13): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div3.rem) * r3$790,1;810,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div3.rem <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,15): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div3.rem.
C:\Escher\Customers\prang-cpp\prang.cpp (76,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div3.rem).
C:\Escher\Customers\prang-cpp\prang.cpp (76,15): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div3.rem) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<short int>(div3.rem) * r3$790,1;810,8$) - (static_cast<short int>(div3.quot) * b3$790,1;810,8$)).
C:\Escher\Customers\prang-cpp\prang.cpp (76,33): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<short int>(div3.rem) * r3$790,1;810,8$) - (static_cast<short int>(div3.quot) * b3$790,1;810,8$)) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= b3$790,1;810,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (76,35): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: b3$790,1;810,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<short int>(div3.quot) * b3$790,1;810,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (76,38): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<short int>(div3.quot) * b3$790,1;810,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= div3.quot.
C:\Escher\Customers\prang-cpp\prang.cpp (76,40): Information! Confirmed: Type constraint satisfied in explicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: div3.quot <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (76,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<short int>(div3.quot).
C:\Escher\Customers\prang-cpp\prang.cpp (76,40): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<short int>(div3.quot) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (77,12): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: -M3$790,1;812,8$ < operator*(heapIs $heap$790,1;812,8$, this).p3.
C:\Escher\Customers\prang-cpp\prang.cpp (77,25): Warning! Unable to prove: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#86), did not prove: !(0 == operator*(heapIs $heap$790,1;812,8$, this).p3).
	Suggestion: Add extra precondition or class invariant: !(0 == ((-63 * div((*this).p3, 178).quot) + (170 * div((*this).p3, 178).rem)))
C:\Escher\Customers\prang-cpp\prang.cpp (77,31): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;812,8$, this).p3 < M3$790,1;812,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (79,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;812,8$, this).p1.
C:\Escher\Customers\prang-cpp\prang.cpp (79,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;812,8$, this).p1 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (79,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0)) * M1$790,1;812,8$) + operator*(heapIs $heap$790,1;812,8$, this).p1).
C:\Escher\Customers\prang-cpp\prang.cpp (79,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0)) * M1$790,1;812,8$) + operator*(heapIs $heap$790,1;812,8$, this).p1) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (79,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0).
C:\Escher\Customers\prang-cpp\prang.cpp (79,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (79,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;812,8$, this).p1 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (79,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;812,8$, this).p1.
C:\Escher\Customers\prang-cpp\prang.cpp (79,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0)) * M1$790,1;812,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (79,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;812,8$, this).p1 < (int)0)) * M1$790,1;812,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (79,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= M1$790,1;812,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (79,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: M1$790,1;812,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;815,8$, this).p2.
C:\Escher\Customers\prang-cpp\prang.cpp (80,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;815,8$, this).p2 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0)) * M2$790,1;815,8$) + operator*(heapIs $heap$790,1;815,8$, this).p2).
C:\Escher\Customers\prang-cpp\prang.cpp (80,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0)) * M2$790,1;815,8$) + operator*(heapIs $heap$790,1;815,8$, this).p2) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0).
C:\Escher\Customers\prang-cpp\prang.cpp (80,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;815,8$, this).p2 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;815,8$, this).p2.
C:\Escher\Customers\prang-cpp\prang.cpp (80,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0)) * M2$790,1;815,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (80,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;815,8$, this).p2 < (int)0)) * M2$790,1;815,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (80,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= M2$790,1;815,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (80,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: M2$790,1;815,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;816,8$, this).p3.
C:\Escher\Customers\prang-cpp\prang.cpp (81,5): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;816,8$, this).p3 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(short int) <= ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0)) * M3$790,1;816,8$) + operator*(heapIs $heap$790,1;816,8$, this).p3).
C:\Escher\Customers\prang-cpp\prang.cpp (81,8): Information! Confirmed: Type constraint satisfied in implicit conversion from 'int' to 'short int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: ((static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0)) * M3$790,1;816,8$) + operator*(heapIs $heap$790,1;816,8$, this).p3) <= maxof(short int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0).
C:\Escher\Customers\prang-cpp\prang.cpp (81,11): Information! Confirmed: Type constraint satisfied in explicit conversion from 'integer' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$790,1;816,8$, this).p3 <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,17): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= operator*(heapIs $heap$790,1;816,8$, this).p3.
C:\Escher\Customers\prang-cpp\prang.cpp (81,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0)) * M3$790,1;816,8$).
C:\Escher\Customers\prang-cpp\prang.cpp (81,25): Information! Confirmed: Arithmetic result of operator '*' is within limit of type 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (static_cast<int>(static_cast<integer>(operator*(heapIs $heap$790,1;816,8$, this).p3 < (int)0)) * M3$790,1;816,8$) <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (81,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: minof(int) <= M3$790,1;816,8$.
C:\Escher\Customers\prang-cpp\prang.cpp (81,27): Information! Confirmed: Type constraint satisfied in implicit conversion from 'short int const' to 'int' in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: M3$790,1;816,8$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (87,12): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$funcend_790,1$, this).invariant1(heapIs $heap$funcend_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (91,34): Information! Confirmed: Precondition of 'operator /' satisfied (defined at built in declaration) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0.0 == static_cast<double>(static_cast<real>(M1$funcend_790,1$))).
C:\Escher\Customers\prang-cpp\prang.cpp (92,34): Information! Confirmed: Precondition of 'operator /' satisfied (defined at built in declaration) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0.0 == static_cast<double>(static_cast<real>(M2$funcend_790,1$))).
C:\Escher\Customers\prang-cpp\prang.cpp (93,34): Information! Confirmed: Precondition of 'operator /' satisfied (defined at built in declaration) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !(0.0 == static_cast<double>(static_cast<real>(M3$funcend_790,1$))).
C:\Escher\Customers\prang-cpp\prang.cpp (95,16): Warning! Exceeded boredom threshold proving: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#130), did not prove: (double)0.0 < raux1.
C:\Escher\Customers\prang-cpp\prang.cpp (95,29): Warning! Exceeded boredom threshold proving: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#129), did not prove: (double)0.0 < raux2.
C:\Escher\Customers\prang-cpp\prang.cpp (95,42): Warning! Exceeded boredom threshold proving: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#128), did not prove: (double)0.0 < raux3.
C:\Escher\Customers\prang-cpp\prang.cpp (97,30): Information! Confirmed: Assertion valid in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: (double)0.0 < (raux3 + raux2 + raux1).
C:\Escher\Customers\prang-cpp\prang.cpp (98,25): Information! Confirmed: Precondition of 'fmod' satisfied (defined at C:\Escher\ecv\standard\math.h (84,16)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: !((double)1.0 == (double)0.0).
C:\Escher\Customers\prang-cpp\prang.cpp (100,9): Information! Confirmed: Postcondition satisfied when function 'GetRandom' returns (defined at C:\Escher\Customers\prang-cpp\prang.cpp (25,33)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: result < (double)1.0.
C:\Escher\Customers\prang-cpp\prang.cpp (100,9): Warning! Exceeded boredom threshold proving: Postcondition satisfied when function 'GetRandom' returns (defined at C:\Escher\Customers\prang-cpp\prang.cpp (25,14)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)] (see C:\Escher\Customers\prang-cpp\prang_unproven.html#133), did not prove: (double)0.0 < result.
C:\Escher\Customers\prang-cpp\prang.cpp (100,9): Information! Confirmed: Postcondition satisfied when function 'GetRandom' returns (defined at C:\Escher\Customers\prang-cpp\prang.cpp (25,52)) in context of class WHPrang [C:\Escher\Customers\prang-cpp\prang.cpp (17,1)], proved: operator*(heapIs $heap$funcend_790,1$, this).invariant1(heapIs $heap$funcend_790,1$).
C:\Escher\Customers\prang-cpp\prang.cpp (120,5): Information! Confirmed: Loop initialisation establishes end condition or a valid variant (defined at C:\Escher\Customers\prang-cpp\prang.cpp (123,20)), proved: 0 <= (limit - count).
C:\Escher\Customers\prang-cpp\prang.cpp (120,5): Information! Confirmed: Loop initialisation establishes loop invariant (defined at C:\Escher\Customers\prang-cpp\prang.cpp (122,16)), proved: prang$844,1;851,5$.invariant1(heapIs $heap$844,1;851,5$).
C:\Escher\Customers\prang-cpp\prang.cpp (124,5): Information! Confirmed: Loop body establishes end condition or preserves validity of variant (defined at C:\Escher\Customers\prang-cpp\prang.cpp (123,20)), proved: 0 <= (limit - count$loopend$).
C:\Escher\Customers\prang-cpp\prang.cpp (124,5): Information! Confirmed: Loop body establishes end condition or decreases variant (defined at C:\Escher\Customers\prang-cpp\prang.cpp (123,5)), proved: (limit - count$loopend$) < (limit - count$loopstart_853,5$).
C:\Escher\Customers\prang-cpp\prang.cpp (124,5): Information! Confirmed: Loop body preserves loop invariant (defined at C:\Escher\Customers\prang-cpp\prang.cpp (122,16)), proved: prang$loopend$.invariant1(heapIs $heap$loopend$).
C:\Escher\Customers\prang-cpp\prang.cpp (125,31): Information! Confirmed: Precondition of 'GetRandom' satisfied (defined at C:\Escher\Customers\prang-cpp\prang.cpp (24,13)), proved: prang$loopstart_853,5$.invariant1(heapIs $heap$loopstart_853,5$).
C:\Escher\Customers\prang-cpp\prang.cpp (126,9): Information! Confirmed: Arithmetic result of operator '++' is within limit of type 'int', proved: ++count$loopstart_853,5$ <= maxof(int).
C:\Escher\Customers\prang-cpp\prang.cpp (126,9): Information! Confirmed: Arithmetic result of operator '++' is within limit of type 'int', proved: minof(int) <= ++count$loopstart_853,5$.
Generating verification output files ... 2 seconds
0 errors, 10 warnings found.
Verification Studio: Job completed but warnings were detected!

